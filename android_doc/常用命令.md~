#学习网址
#关于源码的学习介绍
https://source.android.com/devices/tech/power/values
#功能逻辑介绍
https://developer.android.com/training/index.html

#user eng userdebugger判断
手机:
getprop ro.build.type
out目录:
产看out/target/product/a3a63g_gmo/previous_build_config.mk

#vim配置
显示末尾的空格
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
显示行线
set cursorline
设置tab为4
set ts=4

#重新挂载分区
mount -o rw,remount /分区名称

#uart
MTK  961200

#分辨率
wm size //查看
wm size reset //命令是将分辨率设置为LCD原始分辨率
wm density 1080x2160 //设置分辨率

#重新设置机器像素密度
方法一:
adb root    //提示read only filysystem时执行此命令获取root权限，
adb remount
adb pull /system/build.prop D:\
在build.prop末尾添加一行 ro.sf.lcd_density=240 
adb push  D:\build.prop  /system/
adb shell
cd /system/
chmod 644 build.prop    //没有修改权限将导致手机起不来
方法二： 直接修改system.prop
Y:\xxxx\device\qcom\xxxx\system.prop
ro.sf.lcd_density=240 //改这个值，然后重新编译system.img

#过度绘制开关
adb shell setprop debug.hwui.overdraw show
adb shell setprop debug.hwui.overdraw false

#apktool
1.百度:apktool下载apktool.jar包;
2.在108上有自己目录下有jar包和shell脚本;
3.将jar包和shell脚本在home/bin/下;
4.修改权限:chmod +x apktool
5.在任何目录下都可以执行apktool命令;
eg: apktool d xxx.apk

#dumpsys
#查看支持的查询项目
adb shell dumpsys -l
adb shell service list
adb shell dumpsys meminfo -t 30 // 设置dump时间,dump meninfo

#activity
adb shell dumpsys activity a/s/p com.sina.weibo

adb shell dumpsys activity top //当前界面app状态
adb shell dumpsys activity oom //查看进程状态
adb shell dumpsys activity processes //查看进程信息
adb shell dumpsys activity services // 查看服务信息
adb shell dumpsys activity broadcasts // 查看广播信息

adb shell dumpsys package -a > package.log    //打印package信息
adb shell dumpsys activity //查询AMS服务相关信息
adb shell dumpsys window //查询WMS服务相关信息
adb shell dumpsys cpuinfo //查询CPU情况
adb shell dumpsys meminfo //查询内存情况
adb shell dumpsys window | grep -i focus //获取焦点窗口

#dd
dd if=system.img of=syshead.img count=700 bs=4k

#高通
adb reboot edl 

#高通单刷boot
boot + P文件

#battery
#重新开始统计power_profile.xml
adb shell dumpsys batterystats --enable full-wake-history
adb shell dumpsys batterystats --reset
#dump耗电信息
adb shell dumpsys batterystats > batterystats.txt
https://source.android.com/devices/tech/power/values
http://gityuan.com/2016/01/10/power_rank/

adb pull system/framework/framework-res.apk .

#radio 编译不能识别sim卡

#doze
测试Doze模式
1. 首先确保你的硬件或虚拟设备是Android6.0或更高版本系统；
2. 连接设备到开发机上并安装你的app；
3. 运行app并让其运行活动；
4. 关闭设备的屏幕；
5. 运行以下adb命令使系统进入Doze模式：
$ adb shell dumpsys battery unplug // 不充电
$ adb shell dumpsys deviceidle step // 进入Doze模式
6. 观察你的app表现行为是否有需优化改进的地方。

#App Standby
测试App Standby模式
步骤1-3同测试Doze模式
4. 运行以下adb命令迫使系统进入App Standby模式：
$ adb shell dumpsys battery unplug
$ adb shell am set-inactive <packageName> true
5. 模拟唤醒你的应用程序使用以下命令：
$ adb shell am set-inactive <packageName> false
$ adb shell am get-inactive <packageName>
6. 观察你的App，确保应用程序恢复正常从待机模式过程中，App的通知及其背部活动能达到预期结果。

#vim可以删除行尾多余的空格和tab符号。
:%s/\s\+$//g

#全局替换
:1,$s/old/new/g

#看下开机到哪个阶段了
adb shell cat /proc/bootprof

#查看服务
adb shell service list

**ALM 卡死**
ps -ef | grep ALM

#cts
run cts -m 包 -t <case>

#vim format code
gg=G

set shiftwidth=4 //设置缩进宽度为4

# SELinux 
源类型.te
avc: denied  { 操作权限  }  for pid=7201  comm=“进程名”  scontext=u:r:源类型:s0  tcontext=u:r:目标类型:s0  tclass=访问类型 permissive=0  
格式：allow  源类型 目标类型:访问类型 {操作权限};  
eg:   
avc: denied {getattr read} for pid=7201 comm="xxx.xxx" scontext=u:r:system_app:s0 tcontext=u:r:shell_data_file:s0 tclass=dir permissive=0  
在system_app.te文件中，添加下面语句：  
allow system_app shell_data_file:dir {getattr read};  

# app 开启时间
adb logcat | grep Displayed


# monkey
adb shell monkey -v -v -v -s 8888 --throttle 300 --pct-touch 30 --pct-motion 25 --pct-appswitch 25 --pct-majornav 5 --pct-nav 0 --pct-trackball 0 -p com.android.launcher3 10000 > monkey_launcher.txt

# vim 统计
统计文件里面指定的单词频次
cat file_name | grep -i <count_string> | wc -l
统计打开文件的单词频次,m-n行之间的
:m,ns/\<字符串\>//gn
统计打开文件全文的单词频次
:%s/字符串//ng














